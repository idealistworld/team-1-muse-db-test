Setup Instructions
Prerequisites

Python 3.10+
Supabase account with a project created
pip (Python package manager)

Required Libraries

supabase - Supabase Python client
python-dotenv - Environment variable management
httpx - HTTP client for API requests

Installation Steps
1. Install Required Packages
bashpip install supabase python-dotenv httpx
2. Configure Environment Variables
Create a .env file in your project root:
bashcp .env.example .env
Update the .env file with your Supabase credentials:
env# Supabase connection details
SUPABASE_URL=https://your-project-id.supabase.co
SUPABASE_ANON_KEY=your-anon-key-here

# Test user credentials (for authenticated testing)
TEST_USER_EMAIL=your-test-email@example.com
TEST_USER_PASSWORD=your-test-password
Where to find these values:

SUPABASE_URL: Go to your Supabase project ‚Üí Settings ‚Üí API ‚Üí Project URL
SUPABASE_ANON_KEY: Same location ‚Üí Project API keys ‚Üí anon public key
TEST_USER_EMAIL/PASSWORD: Create a test user in your Supabase project:

Go to Authentication ‚Üí Users ‚Üí Add user
Or sign up through your application
Use these credentials in your .env file



3. Create the .env.example Template (if not exists)
Create a .env.example file for reference:
envSUPABASE_URL=https://your-project-id.supabase.co
SUPABASE_ANON_KEY=your-anon-key-here
TEST_USER_EMAIL=your-test-email@example.com
TEST_USER_PASSWORD=your-test-password
Running the Test Scripts
Run the Connection Test
bashpython3 test_connection.py
Test Options
When prompted, you'll be asked: "üîê Run tests with authentication? (y/n):"
Option 1: Authenticated Tests (recommended)

Enter y when prompted
Uses the credentials from your .env file
Tests will run as the authenticated user
Verifies RLS policies work correctly for authenticated users
Tests INSERT, UPDATE, DELETE operations with proper permissions

Option 2: Anonymous Tests

Enter n when prompted
Runs tests without authentication
Verifies RLS policies block anonymous access (expected behavior)
Good for testing that your security policies are working

What the Tests Check

Connection Test: Verifies you can connect to Supabase
Read Operations: Tests SELECT queries on your tables
Write Operations: Tests INSERT (and cleanup DELETE) on tables
RLS Protection: Verifies Row Level Security policies are working
Join Operations: Tests foreign key relationships and joins

Expected Output
Successful authenticated test run:
üîó Supabase Connection Test
============================================================

‚úÖ Authenticated as: your-test-email@example.com
   User ID: abc-123-def-456

üîç Discovering tables and schema...
‚úÖ Found 7 tables: user_profiles, creator_profiles, creator_content, user_posts, user_media, user_follows, post_inspirations

1Ô∏è‚É£  CONNECTION TEST
------------------------------------------------------------
‚úÖ PASSED - Connected to Supabase successfully
...
Troubleshooting
Authentication Failed

Double-check your TEST_USER_EMAIL and TEST_USER_PASSWORD in .env
Verify the user exists in Supabase ‚Üí Authentication ‚Üí Users
Ensure the user's email is confirmed (if email confirmation is enabled)

Permission Denied Errors

Check your RLS policies in Supabase ‚Üí Database ‚Üí Tables ‚Üí [table name] ‚Üí Policies
Ensure policies allow authenticated users to perform operations
For user-owned tables, verify the user_id column matches auth.uid()

Connection Refused

Verify your SUPABASE_URL is correct
Check that your SUPABASE_ANON_KEY is the anon public key, not the service role key
Ensure your Supabase project is active

Import Errors

Run pip install supabase python-dotenv httpx again
Verify you're using Python 3.10 or higher: python3 --version

Next Steps
After successfully running the tests:

Review the test output to ensure all RLS policies are working as expected
If any tests fail, check the specific error messages
Adjust your RLS policies if needed based on test results
Create additional test users if you need to test multi-user scenarios