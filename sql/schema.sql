-- -----------------------------------------------
-- Extensions & Functions
-- -----------------------------------------------
CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE OR REPLACE FUNCTION touch_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- -----------------------------------------------
-- TABLE: user_profiles
-- -----------------------------------------------
CREATE TABLE IF NOT EXISTS public.user_profiles (
  user_id uuid NOT NULL,
  subscription_tier text NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT user_profiles_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_profiles_subscription_tier_check CHECK (
    subscription_tier = ANY (ARRAY['free'::text, 'pro'::text])
  )
) TABLESPACE pg_default;

CREATE TRIGGER trg_user_profiles_touch
BEFORE UPDATE ON public.user_profiles
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

-- -----------------------------------------------
-- TABLE: creator_profiles
-- -----------------------------------------------
CREATE TABLE IF NOT EXISTS public.creator_profiles (
  creator_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  profile_url text NOT NULL,
  platform text NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT creator_profiles_pkey PRIMARY KEY (creator_id),
  CONSTRAINT creator_profiles_url_chk CHECK ((profile_url ~* '^(https?)://'::text))
) TABLESPACE pg_default;

CREATE UNIQUE INDEX IF NOT EXISTS creator_profiles_platform_url_uniq
ON public.creator_profiles (lower(platform), lower(profile_url))
TABLESPACE pg_default;

CREATE TRIGGER trg_creator_profiles_touch
BEFORE UPDATE ON public.creator_profiles
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

-- -----------------------------------------------
-- TABLE: creator_content
-- -----------------------------------------------
CREATE TABLE IF NOT EXISTS public.creator_content (
  content_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  creator_id bigint NOT NULL,
  post_url text NOT NULL,
  post_raw text NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT creator_content_pkey PRIMARY KEY (content_id),
  CONSTRAINT creator_content_creator_id_fkey FOREIGN KEY (creator_id)
    REFERENCES public.creator_profiles (creator_id) ON DELETE CASCADE
) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS idx_creator_content_creator_id
ON public.creator_content (creator_id);

CREATE TRIGGER trg_creator_content_touch
BEFORE UPDATE ON public.creator_content
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

-- -----------------------------------------------
-- TABLE: user_posts
-- -----------------------------------------------
CREATE TABLE IF NOT EXISTS public.user_posts (
  post_id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  raw_text text NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT user_posts_pkey PRIMARY KEY (post_id),
  CONSTRAINT user_posts_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.user_profiles (user_id) ON DELETE CASCADE
) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS idx_user_posts_user_id
ON public.user_posts (user_id);

CREATE TRIGGER trg_user_posts_touch
BEFORE UPDATE ON public.user_posts
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

-- -----------------------------------------------
-- TABLE: user_media
-- -----------------------------------------------
CREATE TABLE IF NOT EXISTS public.user_media (
  user_media_id uuid NOT NULL DEFAULT gen_random_uuid(),
  post_id uuid NOT NULL,
  media_url text NOT NULL,
  media_type text NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT user_media_pkey PRIMARY KEY (user_media_id),
  CONSTRAINT user_media_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.user_posts (post_id) ON DELETE CASCADE
) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS idx_user_media_post_id
ON public.user_media (post_id);

CREATE TRIGGER trg_user_media_touch
BEFORE UPDATE ON public.user_media
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

-- -----------------------------------------------
-- TABLE: user_follows
-- -----------------------------------------------
CREATE TABLE IF NOT EXISTS public.user_follows (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  creator_id bigint NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT user_follows_pkey PRIMARY KEY (id),
  CONSTRAINT user_follows_unique UNIQUE (user_id, creator_id),
  CONSTRAINT user_follows_creator_id_fkey FOREIGN KEY (creator_id)
    REFERENCES public.creator_profiles (creator_id) ON DELETE CASCADE,
  CONSTRAINT user_follows_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.user_profiles (user_id) ON DELETE CASCADE
) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS user_follows_user_id_idx
ON public.user_follows (user_id);

CREATE INDEX IF NOT EXISTS user_follows_creator_id_idx
ON public.user_follows (creator_id);

CREATE TRIGGER trg_user_follows_touch
BEFORE UPDATE ON public.user_follows
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

-- -----------------------------------------------
-- TABLE: post_inspirations
-- -----------------------------------------------
CREATE TABLE IF NOT EXISTS public.post_inspirations (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  post_id uuid NOT NULL,
  content_id bigint NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT post_inspirations_pkey PRIMARY KEY (id),
  CONSTRAINT post_inspirations_unique UNIQUE (post_id, content_id),
  CONSTRAINT post_inspirations_content_id_fkey FOREIGN KEY (content_id)
    REFERENCES public.creator_content (content_id) ON DELETE CASCADE,
  CONSTRAINT post_inspirations_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.user_posts (post_id) ON DELETE CASCADE
) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS idx_post_inspirations_post_id
ON public.post_inspirations (post_id);

CREATE INDEX IF NOT EXISTS idx_post_inspirations_content_id
ON public.post_inspirations (content_id);

CREATE TRIGGER trg_post_inspirations_touch
BEFORE UPDATE ON public.post_inspirations
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

-- -----------------------------------------------
-- END OF SCHEMA
-- -----------------------------------------------
